package Chapter01;

public class Variable {
    /*
        变量就是内存当中存储数据最基本的单元即最基本的内存存储单元就是变量 ---> 也告诉我们变量是存储在内存当中的
        变量一定要有三要素，少了一个都不认识：数据类型【得先知道你是啥吧】，名字【得先知道你叫啥吧】，值【得先知道你肚子里有啥东西吧】

        这里有一个特例，就是定义一个类变量比如：private static int a; 为什么这个直接读取就读得到呢？
        这个问题的答案还得跟JVM挂钩，原因是这样的：在JVM类加载器子系统加载的过程当中，一共有 3 个流程：加载(Loading)、链接(Linking)、初始化(Initializing)
        其中链接(Linking)包括：验证(Verifying)、准备(Prepare)、解析(Resolving)，在准备这个阶段就会默认赋值给静态变量，都是赋予默认值 ---> int 默认赋为 0
        所以这里在 main() 方法中输出 a 不会报错，但是这里的 b 是实例变量，先有对象才可以调用实例变量。

        变量分为：局部变量和成员变量【静态变量 和 实例变量】
        局部变量在方法体内中声明包括方法名后面括号里的形式参数都属于局部变量，出了方法体的大括号就不认识所以局部变量的生命周期非常短暂，当方法执行结束之后，局部变量的内存也就随之释放掉了。
        成员变量在方法体外类体内中声明，包括静态变量和实例变量其区别就在于有无 static 关键字的修饰，有就是静态变量没有就是实例变量
        比如这里的 a 就是静态变量 b 就是实例变量，a 跟 b 统称为成员变量，这里的 c 就是局部变量

        变量的作用范围很简单：出了大括号就不认识并且采用就近原则，比如这里的 c 是 main 方法里的一个局部变量，在其它方法中是调用不到的，
        如这里的 useC() 方法，想调用 c 但是没有定义所以出现编译错误
        除此之外，如果成员变量和局部变量同时定义了一个同名变量，那看看谁离调用的地方“近”，这个“近”之所以打引号，因为定义需要在调用之前，仔细想想就能明白。
        比如这里的 d ，在类体内定义的是 10，但是在方法体内定义的是 999， 但是因为在打印语句的后面所以打印出来的是 10
        如果再加一条打印语句，打印出来的将会是 999
    */
    private static int a;
    int b = 10;
    private static int d = 10;

    public static void main(String[] args) {
        int c = 100;
        System.out.println(d);
        int d = 999;
        System.out.println(d);
        System.out.println(a);
        System.out.println(c);
    }

    /*public static void useC() {
        System.out.println(c);
    }*/
}
